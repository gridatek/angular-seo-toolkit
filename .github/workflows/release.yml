name: Release

on:
#  push:
#    branches:
#      - main
#      - beta
#      - alpha
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Initialize the Nx Cloud distributed CI run
        run: npx nx-cloud start-ci-run --distribute-on="3 linux-medium-js" --stop-agents-after="build"

      - name: Run builds
        run: npx nx run-many -t build --parallel=3

      - name: Run tests
        run: npx nx run-many -t test --parallel=3 --passWithNoTests

      - name: Run linting
        run: npx nx run-many -t lint --parallel=3

      - name: Stop Nx Cloud distributed CI run
        run: npx nx-cloud stop-all-agents

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Version and Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Set npm authentication
          npm config set '//registry.npmjs.org/:_authToken' "$NPM_TOKEN"

          # Create version and release
          npx nx release version
          npx nx release publish
          npx nx release changelog

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest version and create GitHub release
          VERSION=$(node -p "require('./packages/ngx-seo-toolkit/package.json').version")
          TAG_NAME="ngx-seo-toolkit@${VERSION}"

          # Check if tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, creating GitHub release..."

            # Create GitHub release
            gh release create "$TAG_NAME" \
              --title "ngx-seo-toolkit v${VERSION}" \
              --notes "See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/packages/ngx-seo-toolkit/CHANGELOG.md) for details." \
              --generate-notes \
              --latest
          else
            echo "Tag $TAG_NAME does not exist, skipping GitHub release creation."
          fi
